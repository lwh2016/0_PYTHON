/**********************************************************************************************************************
 *  COPYRIGHT
 *  -------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *
 *                 This software is copyright protected and proprietary to Vector Informatik GmbH.
 *                 Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
 *                 All other rights remain with Vector Informatik GmbH.
 *  \endverbatim
 *  -------------------------------------------------------------------------------------------------------------------
 *  LICENSE
 *  -------------------------------------------------------------------------------------------------------------------
 *            Module: Os
 *           Program: MSR_Vector_SLP4
 *          Customer: TTTech Automotive GmbH
 *       Expiry Date: Not restricted
 *  Ordered Derivat.: TC297TF128 BB-Step
 *    License Scope : The usage is restricted to CBD1700329_D00
 *
 *  -------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------
 *              File: Os_Types_Lcfg.h
 *   Generation Time: 2018-07-17 16:48:58
 *           Project: ApplicationHost_Project - Version 1.0
 *          Delivery: CBD1700329_D00
 *      Tool Version: DaVinci Configurator (beta) 5.15.16 SP2
 *
 *
 *********************************************************************************************************************/

/**********************************************************************************************************************
 ! BETA VERSION                                                                                                       !
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 ! These programs are fully operative programs. With regard to the fact that the programs are a beta-version only,    !
 ! Vector Informatik's liability shall be expressly excluded in cases of ordinary negligence, to the extent           !
 ! admissible by law or statute.                                                                                      !
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
**********************************************************************************************************************/

#if !defined (OS_TYPES_LCFG_H)                                                       /* PRQA S 0883 */ /* MD_Os_0883 */
# define OS_TYPES_LCFG_H

/**********************************************************************************************************************
 *  INCLUDES
 *********************************************************************************************************************/

/* AUTOSAR includes */
# include "Std_Types.h"

/* Os module declarations */

/* Os kernel module dependencies */

/* Os hal dependencies */

/**********************************************************************************************************************
 *  GLOBAL CONSTANT MACROS
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL FUNCTION MACROS
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL DATA TYPES AND STRUCTURES
 *********************************************************************************************************************/

/*! OS-Application identifier. */
typedef enum
{
  OsApp_EyeQCom = 0, /* 0x00000001 */
  OsApp_Platform_C0 = 1, /* 0x00000002 */
  OsApp_Platform_C1 = 2, /* 0x00000004 */
  OsApp_Platform_C2 = 3, /* 0x00000008 */
  OS_APPID_COUNT = 4,
  INVALID_OSAPPLICATION = OS_APPID_COUNT
} ApplicationType;

/*! Trusted function identifier. */
typedef enum
{
  OS_TRUSTEDFUNCTIONID_COUNT = 0
} TrustedFunctionIndexType;

/*! Non-Trusted function identifier. */
typedef enum
{
  OS_NONTRUSTEDFUNCTIONID_COUNT = 0
} Os_NonTrustedFunctionIndexType;

/*! Fast Trusted function identifier. */
typedef enum
{
  OS_FASTTRUSTEDFUNCTIONID_COUNT = 0
} Os_FastTrustedFunctionIndexType;

/*! Task identifier. */
typedef enum
{
  Task_10ms_C0 = 0,
  Task_10ms_C1 = 1,
  Task_10ms_C2 = 2,
  Task_AppMiddleware = 3,
  Task_BSW_C0 = 4,
  Task_BSW_C2 = 5,
  Task_BswQMProxy = 6,
  Task_Com = 7,
  Task_DSC = 8,
  Task_DebugAPH = 9,
  Task_ErrorHandlerMaster = 10,
  Task_ExplicitInit_C0 = 11,
  Task_ExplicitInit_C1 = 12,
  Task_ExplicitInit_C2 = 13,
  Task_EyeQCom = 14,
  Task_Idle_C0 = 15,
  Task_Idle_C1 = 16,
  Task_Idle_C2 = 17,
  Task_Init_C0 = 18,
  Task_Init_C1 = 19,
  Task_Init_C2 = 20,
  Task_LCSM = 21,
  Task_PerAPH = 22,
  Task_SFM = 23,
  Task_SchM_NonCritical_C0 = 24,
  Task_SchM_NonCritical_C2 = 25,
  Task_SchM_TimeCritical = 26,
  Task_SwitchScheduleTable_C0 = 27,
  Task_SwitchScheduleTable_C1 = 28,
  Task_SwitchScheduleTable_C2 = 29,
  Task_UltrasonicHandler = 30,
  Task_Us = 31,
  Task_VMS = 32,
  OS_TASKID_COUNT = 33,
  INVALID_TASK = OS_TASKID_COUNT
} TaskType;

/*! Category 2 ISR identifier. */
typedef enum
{
  ADC0SR1_ISR = 0,
  ADC1SR1_ISR = 1,
  ADC2SR1_ISR = 2,
  ADC3SR1_ISR = 3,
  ADC4SR1_ISR = 4,
  ADC5SR1_ISR = 5,
  CounterIsr_SystemTimerCore0 = 6,
  CounterIsr_SystemTimerCore1 = 7,
  CounterIsr_SystemTimerCore2 = 8,
  DMA_10_ASCLIN_ISR = 9,
  DMA_12_ASCLIN_ISR = 10,
  DMA_13_ASCLIN_ISR = 11,
  SpiSlaveRx_ISR = 12,
  XSignalIsr_OsCore_Core0 = 13,
  XSignalIsr_OsCore_Core1 = 14,
  XSignalIsr_OsCore_Core2 = 15,
  OS_ISRID_COUNT = 16,
  INVALID_ISR = OS_ISRID_COUNT
} ISRType;

/*! Alarm identifier. */
typedef enum
{
  OS_ALARMID_COUNT = 0
} AlarmType;

/*! Counter identifier. */
typedef enum
{
  SystemTimerCore0 = 0,
  SystemTimerCore1 = 1,
  SystemTimerCore2 = 2,
  OS_COUNTERID_COUNT = 3
} CounterType;

/*! ScheduleTable identifier. */
typedef enum
{
  ScheduleTable_Startup_core0 = 0,
  ScheduleTable_Startup_core1 = 1,
  ScheduleTable_Startup_core2 = 2,
  ScheduleTable_core0 = 3,
  ScheduleTable_core1 = 4,
  ScheduleTable_core2 = 5,
  OS_SCHTID_COUNT = 6
} ScheduleTableType;

/*! Resource identifier. */
typedef enum
{
  RES_SCHEDULER_OsCore_Core0 = 0,
  RES_SCHEDULER_OsCore_Core1 = 1,
  RES_SCHEDULER_OsCore_Core2 = 2,
  OS_RESOURCEID_COUNT = 3
} ResourceType;

/*! Spinlock identifier. */
typedef enum
{
  OsSpinlock = 0,
  OS_SPINLOCKID_COUNT = 1,
  INVALID_SPINLOCK = OS_SPINLOCKID_COUNT
} SpinlockIdType;

/*! Peripheral identifier. */
typedef enum
{
  SPI_PROTECTED_AREA = 0,
  OS_PERIPHERALID_COUNT = 1
} Os_PeripheralIdType;

/*! Trace thread identifier (Tasks and ISRs inclusive system objects). */
typedef enum
{
  Os_TraceId_Task_10ms_C0 = 0,
  Os_TraceId_Task_10ms_C1 = 1,
  Os_TraceId_Task_10ms_C2 = 2,
  Os_TraceId_Task_AppMiddleware = 3,
  Os_TraceId_Task_BSW_C0 = 4,
  Os_TraceId_Task_BSW_C2 = 5,
  Os_TraceId_Task_BswQMProxy = 6,
  Os_TraceId_Task_Com = 7,
  Os_TraceId_Task_DSC = 8,
  Os_TraceId_Task_DebugAPH = 9,
  Os_TraceId_Task_ErrorHandlerMaster = 10,
  Os_TraceId_Task_ExplicitInit_C0 = 11,
  Os_TraceId_Task_ExplicitInit_C1 = 12,
  Os_TraceId_Task_ExplicitInit_C2 = 13,
  Os_TraceId_Task_EyeQCom = 14,
  Os_TraceId_Task_Idle_C0 = 15,
  Os_TraceId_Task_Idle_C1 = 16,
  Os_TraceId_Task_Idle_C2 = 17,
  Os_TraceId_Task_Init_C0 = 18,
  Os_TraceId_Task_Init_C1 = 19,
  Os_TraceId_Task_Init_C2 = 20,
  Os_TraceId_Task_LCSM = 21,
  Os_TraceId_Task_PerAPH = 22,
  Os_TraceId_Task_SFM = 23,
  Os_TraceId_Task_SchM_NonCritical_C0 = 24,
  Os_TraceId_Task_SchM_NonCritical_C2 = 25,
  Os_TraceId_Task_SchM_TimeCritical = 26,
  Os_TraceId_Task_SwitchScheduleTable_C0 = 27,
  Os_TraceId_Task_SwitchScheduleTable_C1 = 28,
  Os_TraceId_Task_SwitchScheduleTable_C2 = 29,
  Os_TraceId_Task_UltrasonicHandler = 30,
  Os_TraceId_Task_Us = 31,
  Os_TraceId_Task_VMS = 32,
  Os_TraceId_ADC0SR1_ISR = 33,
  Os_TraceId_ADC1SR1_ISR = 34,
  Os_TraceId_ADC2SR1_ISR = 35,
  Os_TraceId_ADC3SR1_ISR = 36,
  Os_TraceId_ADC4SR1_ISR = 37,
  Os_TraceId_ADC5SR1_ISR = 38,
  Os_TraceId_CounterIsr_SystemTimerCore0 = 39,
  Os_TraceId_CounterIsr_SystemTimerCore1 = 40,
  Os_TraceId_CounterIsr_SystemTimerCore2 = 41,
  Os_TraceId_DMA_10_ASCLIN_ISR = 42,
  Os_TraceId_DMA_12_ASCLIN_ISR = 43,
  Os_TraceId_DMA_13_ASCLIN_ISR = 44,
  Os_TraceId_SpiSlaveRx_ISR = 45,
  Os_TraceId_XSignalIsr_OsCore_Core0 = 46,
  Os_TraceId_XSignalIsr_OsCore_Core1 = 47,
  Os_TraceId_XSignalIsr_OsCore_Core2 = 48,
  OS_TRACE_THREADID_COUNT = 49,
  OS_TRACE_INVALID_THREAD = OS_TRACE_THREADID_COUNT + 1
} Os_TraceThreadIdType;

/*! Trace spinlock identifier (All spinlocks inclusive system objects). */
typedef enum
{
  Os_TraceId_OsSpinlock = OsSpinlock,
  OS_TRACE_NUMBER_OF_CONFIGURED_SPINLOCKS = OS_SPINLOCKID_COUNT,
  OS_TRACE_NUMBER_OF_ALL_SPINLOCKS = OS_SPINLOCKID_COUNT + 0,
  OS_TRACE_INVALID_SPINLOCK = OS_TRACE_NUMBER_OF_ALL_SPINLOCKS + 1
} Os_TraceSpinlockIdType;

/*! Barrier identifiers. */
typedef enum
{
  OS_BARRIERID_COUNT = 0
} Os_BarrierIdType;

/**********************************************************************************************************************
 *  GLOBAL DATA PROTOTYPES
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL CONSTANT DATA PROTOTYPES
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL FUNCTION PROTOTYPES
 *********************************************************************************************************************/


#endif /* OS_TYPES_LCFG_H */

/**********************************************************************************************************************
 *  END OF FILE: Os_Types_Lcfg.h
 *********************************************************************************************************************/
